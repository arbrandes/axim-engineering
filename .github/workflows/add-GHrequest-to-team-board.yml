# This workflow runs when a ticket is created. It checks if the ticket starts
# with '[GH Request]', and if so, adds the github-request label, adds it to the
# tcril-engineering board in the "To Do" column, and notifies: A comment is
# added tagging the tcril-oncall group and a message posted to the
# #tcril-engineering slack channel

# Note: The "github-request" label is NOT auto-applied to all tickets created
# using any `github-request-*` template, because only those with write access
# can add the label. Instead the template inserts [GH Request] at the beginning.
# So, this automation is shakily governed by hoping users do not remove that phrase.

name: Add newly created GitHub Request tickets to the tCRIL Engineering project board
on:
  issues:
    types: [opened]
jobs:
  # First parse issue title and add label, if it doesn't have it already bc only
  # repo members can add the label, even tho it's defined in the template >:( 
  add_label:
    runs-on: ubuntu-latest
    # This is defined on all 3 jobs - so need to change x3 if changing this.
    if: ${{ startsWith(github.event.issue.title, '[GH Request]') || startsWith(github.event.issue.body, '## GitHub')}}
    steps:
      - name: apply github-request label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: github-request

  pr_to_project_board:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.issue.title, '[GH Request]') || startsWith(github.event.issue.body, '## GitHub')}}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0
        with:
          app_id: ${{ secrets.GRAPHQL_AUTH_APP_ID }}
          private_key: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}

      - name: Get tCRIL Engineering project ID
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: openedx
          PROJECT_NUMBER: 8
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name=="To Do") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add github-request labelled issue to project
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Move Issue to "To Do" Status
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }}

  notify_watchers:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.issue.title, '[GH Request]') || startsWith(github.event.issue.body, '## GitHub')}}
    steps:
      - name: Tag tcril on-call
        if: contains(github.event.issue.labels.*.name, 'github-request')
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "Thank you for your report! @openedx/tcril-oncall will take a look as soon as they can." }'

      - name: Alert in Slack
        if: contains(github.event.issue.labels.*.name, 'github-request')
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: C02MB2TBKE3
          slack-message: "Incoming GitHub request: ${{ github.event.issue.title }}\nAuthor: ${{ github.event.issue.user.login }}\nURL: ${{ github.event.issue.html_url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}